# -*- coding: utf-8 -*-
"""
Created on Sat Apr 17 23:36:55 2021

@author: ferna
"""
import numpy as np
from sklearn.cluster import KMeans
import sys
import matplotlib.pylab as plt

def reshape_image(info, image):
    rows, height, number_of_colors = image.shape
    info.append(rows);
    info.append(height)
    info.append(number_of_colors)
    #We then have to manipulate the image because it currently is a 3D model ->
    #We need a 2D matrix so we can apply the fit function 
    image_size = rows * height;
    rescaled_image = image.reshape(image_size, number_of_colors);
    return rescaled_image    

if __name__ == '__main__':
    image = plt.imread("trees.png");
    container = []
    #We then have to reshape the image to pass through the KMeans algorithm -> this is a 3D array, but we want a 2D 
    updated_image = reshape_image(container, image);
    
    #Now, we choose the amount of clusters in order to experiment with them
    k = [3, 6, 40];
    for k_number in k:
        algorithm = KMeans(n_clusters= k_number, random_state=0).fit(updated_image);
        #Now, we have to get the centers and labels that were generated that was generated by the algorithm
        #CREDIT CITATION: https://towardsdatascience.com/understanding-k-means-clustering-in-machine-learning-6a6e67336aa1
        #The above website was incredibly helpful in helping me understand the algorithm through an example and provided the methods below
    #to quickly calculate the centers  and groups in which the pixels were placed 
        centers = algorithm.cluster_centers_
        groupings = algorithm.labels_
        #Now, we just show the picture again
        plt.imshow(centers[groupings].reshape(container[0], container[1], container[2]));